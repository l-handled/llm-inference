name: CI/CD Build, Test & Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install core dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-core.txt

      - name: Install AI dependencies
        run: |
          pip install -r requirements-ai.txt

      - name: Run unit tests
        run: |
          pytest src/tests/unit/ --cov=src --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test Docker containers
        run: |
          cd docker
          docker compose build --no-cache
          docker compose up -d
          sleep 30
          # Test API health
          curl -f http://localhost:8000/healthz || exit 1
          # Test UI accessibility
          curl -f http://localhost:8501 || exit 1
          docker compose down

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
      qdrant:
        image: qdrant/qdrant
        ports:
          - 6333:6333
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-core.txt
          pip install -r requirements-ai.txt

      - name: Run integration tests
        env:
          MONGODB_URI: mongodb://localhost:27017
          QDRANT_HOST: localhost
          QDRANT_PORT: 6333
          API_TOKEN: test-token
        run: |
          pytest src/tests/integration/ -v

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker-build, integration-test]
    if: github.ref == 'refs/heads/main'
    env:
      AWS_REGION: eu-central-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: rag-pipeline
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd docker
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile ..
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Deploy to ECS
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster rag-pipeline-cluster \
            --service rag-pipeline-service \
            --force-new-deployment

      - name: Wait for deployment
        run: |
          aws ecs wait services-stable \
            --cluster rag-pipeline-cluster \
            --services rag-pipeline-service

      - name: Health check
        run: |
          # Wait for service to be ready
          sleep 60
          # Get the public IP/domain and test health endpoint
          # This would need to be configured based on your AWS setup
          echo "Deployment completed successfully" 